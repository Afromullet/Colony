
//The beginning of the file lists all of the identifies body the body parts.
//When the body part is referenced, it uses this token
<bptokenlist>
    <bptoken>chest</bptoken>
    <bptoken>head</bptoken>
    <bptoken>leftarm</bptoken>
    <bptoken>rightarm</bptoken>
    <bptoken>lefthand</bptoken>
    <bptoken>righthand</bptoken>
    <bptoken>leftleg</bptoken>
    <bptoken>rightleg</bptoken>
    <bptoken>leftfoot</bptoken>
    <bptoken>rightfoot</bptoken>
</bptokenlist>

/Used fo constructing a body part. The bptoken tag must match one of the elements in the bptokenlist
<bodyparts>
    <bpdescription>
        <bptoken>chest</bptoken>
        <bodypartname>Chest</bodypartname>
        <canholdweapon>false</canholdweapon>
        <canholdarmor>true</canholdarmor>

    </bpdescription>
</bodyparts>



<bodypartconnections>
<bodypart>
<bptoken>head</bptoken>
<connectsto>chest</connectsto> //Must be a valid bptoken value
<connectiontype>type</connectiontype> //direct,left,right
</bodypart>

</bodypartconnections>


Examples of accessing body

//bReader.load("/Users/Afromullet/Documents/SFML/Colony2/Colony/Creature/BodyData/TestFile.xml");
player.body.openBodyTypeFile("/Users/Afromullet/Documents/SFML/Colony2/Colony/Creature/BodyData/BasicHumanoidBody.xml");
player.body.readBodyTokenList();
player.body.GenerateVertices();
player.body.GenerateEdges();
player.body.GenerateOrganVertices();
player.body.GenerateOrganEdges();
printBodyGraphEdges(player.body.anatomyGraph);
printBodyGraphVertices(player.body.anatomyGraph);
getExternalBodyParts(player.body.anatomyGraph);



player.body.load();
player.body.InitializeBodypartEquipment();

Anatomy_DFS_Section_Visitor vis("armsection");
depth_first_search(player.body.anatomyGraph,visitor(vis));
boost::shared_ptr<std::vector<AnatomyVertex>> aVec = vis.getVector();
std::vector<int> vectorIndices;
vectorIndices = vis.getVertexIndices();


for(int i = 0; i < vectorIndices.size(); i++)
{
std::cout << player.body.anatomyGraph[vectorIndices.at(i)];
}

for(int i=0; i < aVec->size(); i++)
{
;
player.body.anatomyGraph[vectorIndices.at(i)].ApplyDamage(5);
}

for(int i=0; i < num_vertices(player.body.anatomyGraph); i++)
{
std::cout << player.body.anatomyGraph[i];
}


std::cout << "\n\n\n\n New";



Armor testArmor;
testArmor.setItemName("TestArmor1");
testArmor.sections.push_back("upperbodysection");
testArmor.sections.push_back("armsection");


Weapon testWeapon;
testWeapon.enWeaponSize = enLargeWeapon;
testWeapon.sEquipmentName = "TestWeapon";


player.body.EquipArmor(&testArmor);
player.body.EquipWeapon(&testWeapon);

for(int i = 0; i < num_vertices(player.body.anatomyGraph); i++)
{
std::cout << "\n" << player.body.anatomyGraph[i];
}


getVerticesThatCanHoldWeapons(player.body.anatomyGraph);
int b = getFirstUnequippedFromSection(player.body.anatomyGraph,"armsection");
std::cout << "\n B = " << b;
std::cout << player.body.anatomyGraph[b];

std::cout << "\n\n\n\n New 1";

b = getFirstUnequippedFromSection(player.body.anatomyGraph,"legsection");
std::cout << "\n B = " << b;
std::cout << player.body.anatomyGraph[b];

b = getFirstUnequippedFromSection(player.body.anatomyGraph,"footsection");
std::cout << "\n B = " << b;
std::cout << player.body.anatomyGraph[b];

